
NEW_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000524  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000524  000005b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800076  00800076  000005ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001427  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099e  00000000  00000000  00001bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b99  00000000  00000000  00002559  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  000030f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000885  00000000  00000000  000033ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c24  00000000  00000000  00003c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004855  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_1>
   8:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_2>
   c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 57 00 	call	0xae	; 0xae <main>
  8a:	0c 94 90 02 	jmp	0x520	; 0x520 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ISR_0_INIT>:
	ret = INTx_interrupt_Init (&int_0);
	//ret = ir_sensor_intitialize(&sensor_1);
}

void ISR_0_INIT (void){
	gpio_pin_toggle_logic(&pin_1);
  92:	85 e6       	ldi	r24, 0x65	; 101
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 db 00 	call	0x1b6	; 0x1b6 <gpio_pin_toggle_logic>
  9a:	08 95       	ret

0000009c <app_init>:
}


void app_init (void){
	Std_ReturnType ret = E_NOT_OK;
	ret = gpio_pin_initialization(&pin_1);
  9c:	85 e6       	ldi	r24, 0x65	; 101
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <gpio_pin_initialization>
	ret = INTx_interrupt_Init (&int_0);
  a4:	80 e6       	ldi	r24, 0x60	; 96
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 29 02 	call	0x452	; 0x452 <INTx_interrupt_Init>
  ac:	08 95       	ret

000000ae <main>:

Std_ReturnType ret = E_NOT_OK;

int main(void)
{
	app_init();
  ae:	0e 94 4e 00 	call	0x9c	; 0x9c <app_init>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x4>

000000b4 <gpio_pin_direction_inti>:
	else{
		*logic = BIT_READ((*pin_registers[_pin_config->port]),_pin_config->pin);
	}
	
	return ret;
}
  b4:	fc 01       	movw	r30, r24
  b6:	89 2b       	or	r24, r25
  b8:	d1 f1       	breq	.+116    	; 0x12e <gpio_pin_direction_inti+0x7a>
  ba:	20 81       	ld	r18, Z
  bc:	26 95       	lsr	r18
  be:	26 95       	lsr	r18
  c0:	26 95       	lsr	r18
  c2:	27 70       	andi	r18, 0x07	; 7
  c4:	80 81       	ld	r24, Z
  c6:	86 fb       	bst	r24, 6
  c8:	99 27       	eor	r25, r25
  ca:	90 f9       	bld	r25, 0
  cc:	86 ff       	sbrs	r24, 6
  ce:	18 c0       	rjmp	.+48     	; 0x100 <gpio_pin_direction_inti+0x4c>
  d0:	91 30       	cpi	r25, 0x01	; 1
  d2:	79 f5       	brne	.+94     	; 0x132 <gpio_pin_direction_inti+0x7e>
  d4:	e8 2f       	mov	r30, r24
  d6:	e7 70       	andi	r30, 0x07	; 7
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	e2 59       	subi	r30, 0x92	; 146
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	01 90       	ld	r0, Z+
  e4:	f0 81       	ld	r31, Z
  e6:	e0 2d       	mov	r30, r0
  e8:	30 81       	ld	r19, Z
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <gpio_pin_direction_inti+0x40>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	2a 95       	dec	r18
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <gpio_pin_direction_inti+0x3c>
  f8:	83 2b       	or	r24, r19
  fa:	80 83       	st	Z, r24
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	08 95       	ret
 100:	e0 81       	ld	r30, Z
 102:	e7 70       	andi	r30, 0x07	; 7
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	e2 59       	subi	r30, 0x92	; 146
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	01 90       	ld	r0, Z+
 110:	f0 81       	ld	r31, Z
 112:	e0 2d       	mov	r30, r0
 114:	30 81       	ld	r19, Z
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <gpio_pin_direction_inti+0x6c>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	2a 95       	dec	r18
 122:	e2 f7       	brpl	.-8      	; 0x11c <gpio_pin_direction_inti+0x68>
 124:	80 95       	com	r24
 126:	83 23       	and	r24, r19
 128:	80 83       	st	Z, r24
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	08 95       	ret
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret

00000136 <gpio_pin_write_logic>:
 136:	00 97       	sbiw	r24, 0x00	; 0
 138:	d1 f1       	breq	.+116    	; 0x1ae <gpio_pin_write_logic+0x78>
 13a:	dc 01       	movw	r26, r24
 13c:	2c 91       	ld	r18, X
 13e:	26 95       	lsr	r18
 140:	26 95       	lsr	r18
 142:	26 95       	lsr	r18
 144:	27 70       	andi	r18, 0x07	; 7
 146:	66 23       	and	r22, r22
 148:	19 f0       	breq	.+6      	; 0x150 <gpio_pin_write_logic+0x1a>
 14a:	61 30       	cpi	r22, 0x01	; 1
 14c:	c9 f0       	breq	.+50     	; 0x180 <gpio_pin_write_logic+0x4a>
 14e:	31 c0       	rjmp	.+98     	; 0x1b2 <gpio_pin_write_logic+0x7c>
 150:	dc 01       	movw	r26, r24
 152:	ec 91       	ld	r30, X
 154:	e7 70       	andi	r30, 0x07	; 7
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	ea 59       	subi	r30, 0x9A	; 154
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	01 90       	ld	r0, Z+
 162:	f0 81       	ld	r31, Z
 164:	e0 2d       	mov	r30, r0
 166:	30 81       	ld	r19, Z
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <gpio_pin_write_logic+0x3c>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	2a 95       	dec	r18
 174:	e2 f7       	brpl	.-8      	; 0x16e <gpio_pin_write_logic+0x38>
 176:	80 95       	com	r24
 178:	83 23       	and	r24, r19
 17a:	80 83       	st	Z, r24
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	08 95       	ret
 180:	dc 01       	movw	r26, r24
 182:	ec 91       	ld	r30, X
 184:	e7 70       	andi	r30, 0x07	; 7
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	ea 59       	subi	r30, 0x9A	; 154
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	01 90       	ld	r0, Z+
 192:	f0 81       	ld	r31, Z
 194:	e0 2d       	mov	r30, r0
 196:	30 81       	ld	r19, Z
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <gpio_pin_write_logic+0x6c>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	2a 95       	dec	r18
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <gpio_pin_write_logic+0x68>
 1a6:	83 2b       	or	r24, r19
 1a8:	80 83       	st	Z, r24
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	08 95       	ret
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	08 95       	ret

000001b6 <gpio_pin_toggle_logic>:
#endif

#if GPIO_PIN_CONFIGURATION == CONFIG_ENABLE
Std_ReturnType gpio_pin_toggle_logic         (const pin_config_t *_pin_config){
	Std_ReturnType ret = E_OK ;
	if ((NULL == _pin_config) || (_pin_config->pin > (MAX_NUMBER_OF_BINS-1))){
 1b6:	00 97       	sbiw	r24, 0x00	; 0
 1b8:	d1 f0       	breq	.+52     	; 0x1ee <gpio_pin_toggle_logic+0x38>
 1ba:	dc 01       	movw	r26, r24
 1bc:	2c 91       	ld	r18, X
 1be:	26 95       	lsr	r18
 1c0:	26 95       	lsr	r18
 1c2:	26 95       	lsr	r18
 1c4:	27 70       	andi	r18, 0x07	; 7
		ret = E_NOT_OK;
	}
	else{
		TOGGLE_BIT((*port_registers[_pin_config->port]),_pin_config->pin);
 1c6:	ec 91       	ld	r30, X
 1c8:	e7 70       	andi	r30, 0x07	; 7
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	ea 59       	subi	r30, 0x9A	; 154
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	01 90       	ld	r0, Z+
 1d6:	f0 81       	ld	r31, Z
 1d8:	e0 2d       	mov	r30, r0
 1da:	30 81       	ld	r19, Z
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <gpio_pin_toggle_logic+0x30>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	2a 95       	dec	r18
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <gpio_pin_toggle_logic+0x2c>
 1ea:	83 27       	eor	r24, r19
 1ec:	80 83       	st	Z, r24
	}
}
 1ee:	08 95       	ret

000001f0 <gpio_pin_initialization>:
#endif

#if GPIO_PIN_CONFIGURATION == CONFIG_ENABLE
Std_ReturnType gpio_pin_initialization       (const pin_config_t *_pin_config){
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
	Std_ReturnType ret = E_OK ;
	if ((NULL == _pin_config) || (_pin_config->pin > (MAX_NUMBER_OF_BINS-1))){
 1f4:	00 97       	sbiw	r24, 0x00	; 0
 1f6:	59 f0       	breq	.+22     	; 0x20e <gpio_pin_initialization+0x1e>
 1f8:	ec 01       	movw	r28, r24
		ret = E_NOT_OK;
	}
	else{
		ret = gpio_pin_direction_inti(_pin_config);
 1fa:	0e 94 5a 00 	call	0xb4	; 0xb4 <gpio_pin_direction_inti>
		ret = gpio_pin_write_logic(_pin_config , _pin_config->logic);
 1fe:	68 81       	ld	r22, Y
 200:	67 fb       	bst	r22, 7
 202:	66 27       	eor	r22, r22
 204:	60 f9       	bld	r22, 0
 206:	ce 01       	movw	r24, r28
 208:	0e 94 9b 00 	call	0x136	; 0x136 <gpio_pin_write_logic>
 20c:	01 c0       	rjmp	.+2      	; 0x210 <gpio_pin_initialization+0x20>

#if GPIO_PIN_CONFIGURATION == CONFIG_ENABLE
Std_ReturnType gpio_pin_initialization       (const pin_config_t *_pin_config){
	Std_ReturnType ret = E_OK ;
	if ((NULL == _pin_config) || (_pin_config->pin > (MAX_NUMBER_OF_BINS-1))){
		ret = E_NOT_OK;
 20e:	80 e0       	ldi	r24, 0x00	; 0
	else{
		ret = gpio_pin_direction_inti(_pin_config);
		ret = gpio_pin_write_logic(_pin_config , _pin_config->logic);
	}
	return ret;
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <Interrupt_INTx_Enable>:


Std_ReturnType INTx_interrupt_DeInit(const interrupt_INTx_t *int_obj){
	
	
}
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	01 f1       	breq	.+64     	; 0x25a <Interrupt_INTx_Enable+0x44>
 21a:	fc 01       	movw	r30, r24
 21c:	84 81       	ldd	r24, Z+4	; 0x04
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	61 f0       	breq	.+24     	; 0x23a <Interrupt_INTx_Enable+0x24>
 222:	18 f0       	brcs	.+6      	; 0x22a <Interrupt_INTx_Enable+0x14>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	89 f0       	breq	.+34     	; 0x24a <Interrupt_INTx_Enable+0x34>
 228:	1a c0       	rjmp	.+52     	; 0x25e <Interrupt_INTx_Enable+0x48>
 22a:	8f b7       	in	r24, 0x3f	; 63
 22c:	80 68       	ori	r24, 0x80	; 128
 22e:	8f bf       	out	0x3f, r24	; 63
 230:	8b b7       	in	r24, 0x3b	; 59
 232:	80 64       	ori	r24, 0x40	; 64
 234:	8b bf       	out	0x3b, r24	; 59
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	08 95       	ret
 23a:	8f b7       	in	r24, 0x3f	; 63
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	8f bf       	out	0x3f, r24	; 63
 240:	8b b7       	in	r24, 0x3b	; 59
 242:	80 68       	ori	r24, 0x80	; 128
 244:	8b bf       	out	0x3b, r24	; 59
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	08 95       	ret
 24a:	8f b7       	in	r24, 0x3f	; 63
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	8f bf       	out	0x3f, r24	; 63
 250:	8b b7       	in	r24, 0x3b	; 59
 252:	80 62       	ori	r24, 0x20	; 32
 254:	8b bf       	out	0x3b, r24	; 59
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	08 95       	ret
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	08 95       	ret

00000262 <Interrupt_INTx_Disable>:
 262:	00 97       	sbiw	r24, 0x00	; 0
 264:	b9 f0       	breq	.+46     	; 0x294 <Interrupt_INTx_Disable+0x32>
 266:	fc 01       	movw	r30, r24
 268:	84 81       	ldd	r24, Z+4	; 0x04
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	49 f0       	breq	.+18     	; 0x280 <Interrupt_INTx_Disable+0x1e>
 26e:	18 f0       	brcs	.+6      	; 0x276 <Interrupt_INTx_Disable+0x14>
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	59 f0       	breq	.+22     	; 0x28a <Interrupt_INTx_Disable+0x28>
 274:	11 c0       	rjmp	.+34     	; 0x298 <Interrupt_INTx_Disable+0x36>
 276:	8b b7       	in	r24, 0x3b	; 59
 278:	8f 7b       	andi	r24, 0xBF	; 191
 27a:	8b bf       	out	0x3b, r24	; 59
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	08 95       	ret
 280:	8b b7       	in	r24, 0x3b	; 59
 282:	8f 77       	andi	r24, 0x7F	; 127
 284:	8b bf       	out	0x3b, r24	; 59
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	08 95       	ret
 28a:	8b b7       	in	r24, 0x3b	; 59
 28c:	8f 7d       	andi	r24, 0xDF	; 223
 28e:	8b bf       	out	0x3b, r24	; 59
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	08 95       	ret
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	08 95       	ret
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	08 95       	ret

0000029c <Interrupt_INTx_Clear_Flag>:
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	b9 f0       	breq	.+46     	; 0x2ce <Interrupt_INTx_Clear_Flag+0x32>
 2a0:	fc 01       	movw	r30, r24
 2a2:	84 81       	ldd	r24, Z+4	; 0x04
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	49 f0       	breq	.+18     	; 0x2ba <Interrupt_INTx_Clear_Flag+0x1e>
 2a8:	18 f0       	brcs	.+6      	; 0x2b0 <Interrupt_INTx_Clear_Flag+0x14>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	59 f0       	breq	.+22     	; 0x2c4 <Interrupt_INTx_Clear_Flag+0x28>
 2ae:	11 c0       	rjmp	.+34     	; 0x2d2 <Interrupt_INTx_Clear_Flag+0x36>
 2b0:	8a b7       	in	r24, 0x3a	; 58
 2b2:	8f 7b       	andi	r24, 0xBF	; 191
 2b4:	8a bf       	out	0x3a, r24	; 58
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	08 95       	ret
 2ba:	8a b7       	in	r24, 0x3a	; 58
 2bc:	8f 77       	andi	r24, 0x7F	; 127
 2be:	8a bf       	out	0x3a, r24	; 58
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	08 95       	ret
 2c4:	8a b7       	in	r24, 0x3a	; 58
 2c6:	8f 7d       	andi	r24, 0xDF	; 223
 2c8:	8a bf       	out	0x3a, r24	; 58
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	08 95       	ret
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	08 95       	ret
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	08 95       	ret

000002d6 <Interrupt_INTx_Set_Sense>:
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	09 f4       	brne	.+2      	; 0x2dc <Interrupt_INTx_Set_Sense+0x6>
 2da:	6e c0       	rjmp	.+220    	; 0x3b8 <Interrupt_INTx_Set_Sense+0xe2>
 2dc:	fc 01       	movw	r30, r24
 2de:	24 81       	ldd	r18, Z+4	; 0x04
 2e0:	21 30       	cpi	r18, 0x01	; 1
 2e2:	81 f1       	breq	.+96     	; 0x344 <Interrupt_INTx_Set_Sense+0x6e>
 2e4:	20 f0       	brcs	.+8      	; 0x2ee <Interrupt_INTx_Set_Sense+0x18>
 2e6:	22 30       	cpi	r18, 0x02	; 2
 2e8:	09 f4       	brne	.+2      	; 0x2ec <Interrupt_INTx_Set_Sense+0x16>
 2ea:	56 c0       	rjmp	.+172    	; 0x398 <Interrupt_INTx_Set_Sense+0xc2>
 2ec:	67 c0       	rjmp	.+206    	; 0x3bc <Interrupt_INTx_Set_Sense+0xe6>
 2ee:	fc 01       	movw	r30, r24
 2f0:	83 81       	ldd	r24, Z+3	; 0x03
 2f2:	81 11       	cpse	r24, r1
 2f4:	08 c0       	rjmp	.+16     	; 0x306 <Interrupt_INTx_Set_Sense+0x30>
 2f6:	85 b7       	in	r24, 0x35	; 53
 2f8:	8d 7f       	andi	r24, 0xFD	; 253
 2fa:	85 bf       	out	0x35, r24	; 53
 2fc:	85 b7       	in	r24, 0x35	; 53
 2fe:	8e 7f       	andi	r24, 0xFE	; 254
 300:	85 bf       	out	0x35, r24	; 53
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	08 95       	ret
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	41 f4       	brne	.+16     	; 0x31a <Interrupt_INTx_Set_Sense+0x44>
 30a:	85 b7       	in	r24, 0x35	; 53
 30c:	8d 7f       	andi	r24, 0xFD	; 253
 30e:	85 bf       	out	0x35, r24	; 53
 310:	85 b7       	in	r24, 0x35	; 53
 312:	81 60       	ori	r24, 0x01	; 1
 314:	85 bf       	out	0x35, r24	; 53
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	08 95       	ret
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	41 f4       	brne	.+16     	; 0x32e <Interrupt_INTx_Set_Sense+0x58>
 31e:	85 b7       	in	r24, 0x35	; 53
 320:	82 60       	ori	r24, 0x02	; 2
 322:	85 bf       	out	0x35, r24	; 53
 324:	85 b7       	in	r24, 0x35	; 53
 326:	8e 7f       	andi	r24, 0xFE	; 254
 328:	85 bf       	out	0x35, r24	; 53
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	08 95       	ret
 32e:	83 30       	cpi	r24, 0x03	; 3
 330:	09 f0       	breq	.+2      	; 0x334 <Interrupt_INTx_Set_Sense+0x5e>
 332:	46 c0       	rjmp	.+140    	; 0x3c0 <Interrupt_INTx_Set_Sense+0xea>
 334:	85 b7       	in	r24, 0x35	; 53
 336:	82 60       	ori	r24, 0x02	; 2
 338:	85 bf       	out	0x35, r24	; 53
 33a:	85 b7       	in	r24, 0x35	; 53
 33c:	81 60       	ori	r24, 0x01	; 1
 33e:	85 bf       	out	0x35, r24	; 53
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	08 95       	ret
 344:	fc 01       	movw	r30, r24
 346:	83 81       	ldd	r24, Z+3	; 0x03
 348:	81 11       	cpse	r24, r1
 34a:	08 c0       	rjmp	.+16     	; 0x35c <Interrupt_INTx_Set_Sense+0x86>
 34c:	85 b7       	in	r24, 0x35	; 53
 34e:	87 7f       	andi	r24, 0xF7	; 247
 350:	85 bf       	out	0x35, r24	; 53
 352:	85 b7       	in	r24, 0x35	; 53
 354:	8b 7f       	andi	r24, 0xFB	; 251
 356:	85 bf       	out	0x35, r24	; 53
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	08 95       	ret
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	41 f4       	brne	.+16     	; 0x370 <Interrupt_INTx_Set_Sense+0x9a>
 360:	85 b7       	in	r24, 0x35	; 53
 362:	87 7f       	andi	r24, 0xF7	; 247
 364:	85 bf       	out	0x35, r24	; 53
 366:	85 b7       	in	r24, 0x35	; 53
 368:	84 60       	ori	r24, 0x04	; 4
 36a:	85 bf       	out	0x35, r24	; 53
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	08 95       	ret
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	41 f4       	brne	.+16     	; 0x384 <Interrupt_INTx_Set_Sense+0xae>
 374:	85 b7       	in	r24, 0x35	; 53
 376:	88 60       	ori	r24, 0x08	; 8
 378:	85 bf       	out	0x35, r24	; 53
 37a:	85 b7       	in	r24, 0x35	; 53
 37c:	8b 7f       	andi	r24, 0xFB	; 251
 37e:	85 bf       	out	0x35, r24	; 53
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	08 95       	ret
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	f1 f4       	brne	.+60     	; 0x3c4 <Interrupt_INTx_Set_Sense+0xee>
 388:	85 b7       	in	r24, 0x35	; 53
 38a:	88 60       	ori	r24, 0x08	; 8
 38c:	85 bf       	out	0x35, r24	; 53
 38e:	85 b7       	in	r24, 0x35	; 53
 390:	84 60       	ori	r24, 0x04	; 4
 392:	85 bf       	out	0x35, r24	; 53
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	08 95       	ret
 398:	fc 01       	movw	r30, r24
 39a:	83 81       	ldd	r24, Z+3	; 0x03
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	29 f4       	brne	.+10     	; 0x3aa <Interrupt_INTx_Set_Sense+0xd4>
 3a0:	84 b7       	in	r24, 0x34	; 52
 3a2:	8f 7b       	andi	r24, 0xBF	; 191
 3a4:	84 bf       	out	0x34, r24	; 52
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	08 95       	ret
 3aa:	83 30       	cpi	r24, 0x03	; 3
 3ac:	69 f4       	brne	.+26     	; 0x3c8 <Interrupt_INTx_Set_Sense+0xf2>
 3ae:	84 b7       	in	r24, 0x34	; 52
 3b0:	80 64       	ori	r24, 0x40	; 64
 3b2:	84 bf       	out	0x34, r24	; 52
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	08 95       	ret
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	08 95       	ret
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	08 95       	ret
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	08 95       	ret
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	08 95       	ret
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	08 95       	ret

000003cc <Interrupt_INT0_MoveAddressFromStruct>:
 3cc:	00 97       	sbiw	r24, 0x00	; 0
 3ce:	31 f0       	breq	.+12     	; 0x3dc <Interrupt_INT0_MoveAddressFromStruct+0x10>
 3d0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <INT0_InterruptHandler+0x1>
 3d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <INT0_InterruptHandler>
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	08 95       	ret
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	08 95       	ret

000003e0 <Interrupt_INT1_MoveAddressFromStruct>:
 3e0:	00 97       	sbiw	r24, 0x00	; 0
 3e2:	31 f0       	breq	.+12     	; 0x3f0 <Interrupt_INT1_MoveAddressFromStruct+0x10>
 3e4:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <INT1_InterruptHandler+0x1>
 3e8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <INT1_InterruptHandler>
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	08 95       	ret
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret

000003f4 <Interrupt_INT2_MoveAddressFromStruct>:
 3f4:	00 97       	sbiw	r24, 0x00	; 0
 3f6:	31 f0       	breq	.+12     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
 3fc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	08 95       	ret
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	08 95       	ret

00000408 <Interrupt_Choose_Handler_INTx>:
 408:	00 97       	sbiw	r24, 0x00	; 0
 40a:	b9 f0       	breq	.+46     	; 0x43a <Interrupt_Choose_Handler_INTx+0x32>
 40c:	fc 01       	movw	r30, r24
 40e:	84 81       	ldd	r24, Z+4	; 0x04
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	49 f0       	breq	.+18     	; 0x426 <Interrupt_Choose_Handler_INTx+0x1e>
 414:	18 f0       	brcs	.+6      	; 0x41c <Interrupt_Choose_Handler_INTx+0x14>
 416:	82 30       	cpi	r24, 0x02	; 2
 418:	59 f0       	breq	.+22     	; 0x430 <Interrupt_Choose_Handler_INTx+0x28>
 41a:	11 c0       	rjmp	.+34     	; 0x43e <Interrupt_Choose_Handler_INTx+0x36>
 41c:	80 81       	ld	r24, Z
 41e:	91 81       	ldd	r25, Z+1	; 0x01
 420:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Interrupt_INT0_MoveAddressFromStruct>
 424:	08 95       	ret
 426:	80 81       	ld	r24, Z
 428:	91 81       	ldd	r25, Z+1	; 0x01
 42a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Interrupt_INT1_MoveAddressFromStruct>
 42e:	08 95       	ret
 430:	80 81       	ld	r24, Z
 432:	91 81       	ldd	r25, Z+1	; 0x01
 434:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Interrupt_INT2_MoveAddressFromStruct>
 438:	08 95       	ret
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	08 95       	ret

00000442 <Interrupt_INTx_Pin_Init>:
 442:	00 97       	sbiw	r24, 0x00	; 0
 444:	21 f0       	breq	.+8      	; 0x44e <Interrupt_INTx_Pin_Init+0xc>
 446:	02 96       	adiw	r24, 0x02	; 2
 448:	0e 94 5a 00 	call	0xb4	; 0xb4 <gpio_pin_direction_inti>
 44c:	08 95       	ret
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	08 95       	ret

00000452 <INTx_interrupt_Init>:
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	00 97       	sbiw	r24, 0x00	; 0
 458:	99 f0       	breq	.+38     	; 0x480 <INTx_interrupt_Init+0x2e>
 45a:	ec 01       	movw	r28, r24
 45c:	0e 94 31 01 	call	0x262	; 0x262 <Interrupt_INTx_Disable>
 460:	ce 01       	movw	r24, r28
 462:	0e 94 4e 01 	call	0x29c	; 0x29c <Interrupt_INTx_Clear_Flag>
 466:	ce 01       	movw	r24, r28
 468:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Interrupt_INTx_Set_Sense>
 46c:	ce 01       	movw	r24, r28
 46e:	0e 94 21 02 	call	0x442	; 0x442 <Interrupt_INTx_Pin_Init>
 472:	ce 01       	movw	r24, r28
 474:	0e 94 04 02 	call	0x408	; 0x408 <Interrupt_Choose_Handler_INTx>
 478:	ce 01       	movw	r24, r28
 47a:	0e 94 0b 01 	call	0x216	; 0x216 <Interrupt_INTx_Enable>
 47e:	01 c0       	rjmp	.+2      	; 0x482 <INTx_interrupt_Init+0x30>
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <INT0_ISR>:


void INT0_ISR (void){
	/* The INT0 external interrupt occurred (must be cleared in software) */
	EXT_INT0_InterruptFlagClear();
 488:	8a b7       	in	r24, 0x3a	; 58
 48a:	8f 7b       	andi	r24, 0xBF	; 191
 48c:	8a bf       	out	0x3a, r24	; 58
	/*   code    */
	
	/* Application Callback function gets called every time this ISR executes */
	if(INT0_InterruptHandler){ INT0_InterruptHandler(); }
 48e:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <INT0_InterruptHandler>
 492:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <INT0_InterruptHandler+0x1>
 496:	30 97       	sbiw	r30, 0x00	; 0
 498:	09 f0       	breq	.+2      	; 0x49c <INT0_ISR+0x14>
 49a:	09 95       	icall
 49c:	08 95       	ret

0000049e <__vector_1>:
uint8 int0_en_bit = 0;


void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 49e:	1f 92       	push	r1
 4a0:	0f 92       	push	r0
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	0f 92       	push	r0
 4a6:	11 24       	eor	r1, r1
 4a8:	2f 93       	push	r18
 4aa:	3f 93       	push	r19
 4ac:	4f 93       	push	r20
 4ae:	5f 93       	push	r21
 4b0:	6f 93       	push	r22
 4b2:	7f 93       	push	r23
 4b4:	8f 93       	push	r24
 4b6:	9f 93       	push	r25
 4b8:	af 93       	push	r26
 4ba:	bf 93       	push	r27
 4bc:	ef 93       	push	r30
 4be:	ff 93       	push	r31
	uint8 int0_en_bit_read   = BIT_READ(GICR_T,6);
 4c0:	9b b7       	in	r25, 0x3b	; 59
	uint8 int0_flag_bit_read = BIT_READ(GIFR_T,6);
 4c2:	8a b7       	in	r24, 0x3a	; 58
 4c4:	86 fb       	bst	r24, 6
 4c6:	88 27       	eor	r24, r24
 4c8:	80 f9       	bld	r24, 0
	
	if((INTERRUPT_ENABLE == int0_en_bit_read) && (INTERRUPT_OCCUR == int0_flag_bit_read)){
 4ca:	96 ff       	sbrs	r25, 6
 4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <__vector_1+0x38>
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	11 f4       	brne	.+4      	; 0x4d6 <__vector_1+0x38>
		INT0_ISR();
 4d2:	0e 94 44 02 	call	0x488	; 0x488 <INT0_ISR>
	}
	else{/* nothing */}

}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
	
	
	
}
 502:	0f 90       	pop	r0
 504:	0f be       	out	0x3f, r0	; 63
 506:	0f 90       	pop	r0
 508:	1f 90       	pop	r1
 50a:	18 95       	reti

0000050c <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 50c:	1f 92       	push	r1
 50e:	0f 92       	push	r0
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	0f 92       	push	r0
 514:	11 24       	eor	r1, r1
	
	
	
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <_exit>:
 520:	f8 94       	cli

00000522 <__stop_program>:
 522:	ff cf       	rjmp	.-2      	; 0x522 <__stop_program>
